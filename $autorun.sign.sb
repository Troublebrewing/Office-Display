//Opening comments
// USE AT&F 1 command to erase all files on module
// USE AT+RUN "$autorun" to run this application
//*****************
//Includes
//*****************

//*****************
//Global Variables
//*****************
// Display resolution
#define EPD_WIDTH       800//600
#define EPD_HEIGHT      480//448
#define DISPLAY_CS_GPIO_NUMBER      12  //SIO_12
#define DISPLAY_DC_GPIO_NUMBER      26  //SIO_26
#define DISPLAY_RESET_GPIO_NUMBER   27  //SIO_27
#define DISPLAY_BUSY_GPIO_NUMBER    11  //SIO_11
#define DISPLAY_DO_GPIO_NUMBER      40  //SIO_40
#define DISPLAY_CLK_GPIO_NUMBER     41  //SIO_41
#define BATTERY_READ                30    //SIO30 
#define BUTTON_GPIO                 31   //SIO31 

#define DISPLAY_REFRESH_TIME        10000

#define CONFIG_KEY_ID_START_STR   100                             //The start ID in nvrecord non-vol space for string config keys
#define CONFIG_KEY_ID_MAX_STR     10                              //Maximum number of string config keys

DIM rc
DIM h   //handle
DIM rl  //readlen
DIM rd$ ,wr$,p$
DIM wren
DIM display_data$
DIM battery_level

//============================================================================== 
 // Open VSP and start advertising 
 //============================================================================== 
 SUB OnStartup() 
     DIM rc, hndl, tx$, scRpt$, addr$, adRpt$ : adRpt$="" : addr$="" 
     
     rc=BleVSpOpen(128,128,0,hndl) 
     scRpt$=""
     rc=BleScanRptInit(scRpt$) 

     rc=BleAdvRptAddUuid128(scRpt$,hndl) 
     rc=BleAdvRptsCommit(adRpt$,scRpt$) 
     addr$ = ""
     rc=BleAdvertStart(0,addr$,20,300000,0) 
     PRINT "\nAdvertising Device name: "; BleGetDeviceName$();"\n"
     
     tx$="\nSend me some text \nTo exit the app, just tell me\n" 
     rc = BleVSpWrite(tx$) 
 ENDSUB 

//*****************
//Display Subroutines
//*****************
SUB Delay(ms) 
    dim tn : tn = GetTickCount() 
    
    while (GetTickSince(tn)<ms)
    endwhile
ENDSUB

SUB SendCommand()
    GpioWrite(DISPLAY_DC_GPIO_NUMBER,0)
    GpioWrite(DISPLAY_CS_GPIO_NUMBER,0)
    rd$=""
    rc=SpiWrite(wr$)
    GpioWrite(DISPLAY_CS_GPIO_NUMBER,1)
ENDSUB

SUB SendData()
    GpioWrite(DISPLAY_DC_GPIO_NUMBER,1)
    GpioWrite(DISPLAY_CS_GPIO_NUMBER,0)
    rd$="" 
    rc=SpiWrite(wr$)
    GpioWrite(DISPLAY_CS_GPIO_NUMBER,1)
ENDSUB

SUB StartDisplayTimeout()
    
    TimerCancel(1)              //restart timeout
    TimerStart(1,2000,0)        //restart timeout

ENDSUB

SUB Wait_Until_Busy_High()
    //print "wait for busy to go high..."
    //dim busy
    //DO
    //    busy = GpioRead(DISPLAY_BUSY_GPIO_NUMBER)
    //UNTIL(busy == 1)
    //StartDisplayTimeout()

    Delay(1)
    while(!GpioRead(DISPLAY_BUSY_GPIO_NUMBER))
        Delay(1)
    endwhile
    //TimerCancel(1)              //restart timeout
    //print "done\n"
ENDSUB

SUB Wait_Until_Busy_Low()
    //print "wait for busy to go low..."
    //dim busy
    //DO
    //    busy = GpioRead(DISPLAY_BUSY_GPIO_NUMBER)
    //UNTIL(busy == 0)
    //StartDisplayTimeout()

    Delay(1)
    while(GpioRead(DISPLAY_BUSY_GPIO_NUMBER))
        Delay(1)
    endwhile
    //TimerCancel(1)              //restart timeout
    //print "done\n"
ENDSUB

SUB ResetPulse()
    GpioWrite(DISPLAY_RESET_GPIO_NUMBER,1)
    Delay(20)
    GpioWrite(DISPLAY_RESET_GPIO_NUMBER,0) //module reset    
    Delay(2)
    GpioWrite(DISPLAY_RESET_GPIO_NUMBER,1) 
    Delay(20)  
ENDSUB

SUB PowerOnDisplay()
    wr$ = "\04" : SendCommand()
    Wait_Until_Busy_High()
ENDSUB

SUB PowerOffDisplay()
    wr$ = "\02" : SendCommand()
    wr$ = "\00" : SendData()
    Wait_Until_Busy_High()
ENDSUB

SUB RefreshDisplay()
    PowerOnDisplay()
    wr$ = "\12" : SendCommand()
    wr$ = "\00" : SendData()
    Delay(1)
    Wait_Until_Busy_High()
ENDSUB

SUB HibernateDisplay()  //deep sleep/hibernate display
    wr$ = "\07" : SendCommand()
    wr$ = "\A5" : SendData()
    Delay(10)
    Wait_Until_Busy_High()
ENDSUB

SUB InitDisplay73()
    print "Initializing display..."
    //print "reset pulse..."
    ResetPulse()
    //print "done\n"
    //print "delay..."
    Delay(20)
    //print "done\n"
    Wait_Until_Busy_High()
    //print "sending init data..."
    wr$ = "\AA" : SendCommand()//CMDH
    wr$ = "\49\55\20\08\09\18" : SendData()

    wr$ = "\01" : SendCommand()//PWRR
    wr$ = "\3F\00\32\2A\0E\2A" : SendData()

    wr$ = "\00" : SendCommand()//PSR
    wr$ = "\5F\69" : SendData()

    wr$ = "\03" : SendCommand()//POFS
    wr$ = "\00\54\00\44" : SendData()

    wr$ = "\05" : SendCommand()//BTST1
    wr$ = "\40\1F\1F\2C" : SendData()
    
    wr$ = "\06" : SendCommand()//BTST2
    wr$ = "\6F\1F\1F\22" : SendData()

    wr$ = "\08" : SendCommand()//BTST3
    wr$ = "\6F\1F\1F\22" : SendData()

    wr$ = "\13" : SendCommand()//IPC
    wr$ = "\00\04" : SendData()
    
    wr$ = "\30" : SendCommand()//PLL
    wr$ = "\3C" : SendData()
    
    wr$ = "\41" : SendCommand()//TSE
    wr$ = "\00" : SendData()
    
    wr$ = "\50" : SendCommand()//CDI
    wr$ = "\3F" : SendData()
    
    wr$ = "\60" : SendCommand()//TCON
    wr$ = "\02\00" : SendData()
    
    wr$ = "\61" : SendCommand()//TRES
    wr$ = "\03\20\01\E0" : SendData()
    
    wr$ = "\82" : SendCommand()//VDCS
    wr$ = "\1E" : SendData()
    
    wr$ = "\84" : SendCommand()//T_VDCS
    wr$ = "\00" : SendData()
    
    wr$ = "\86" : SendCommand()//AGID
    wr$ = "\00" : SendData()
    
    wr$ = "\E3" : SendCommand()//PWS
    wr$ = "\2F" : SendData()
    
    wr$ = "\E0" : SendCommand()//CCSET
    wr$ = "\00" : SendData()
    
    wr$ = "\E6" : SendCommand()//TSSET
    wr$ = "\00" : SendData()
    print "done"
ENDSUB

SUB WriteScreenBuffer()
    wr$ = "\10" : SendCommand()     //start data
    GpioWrite(DISPLAY_DC_GPIO_NUMBER,1)
    GpioWrite(DISPLAY_CS_GPIO_NUMBER,0)
    rd$="" 
    DIM i AS INTEGER
    FOR i=0 TO ((EPD_WIDTH*EPD_HEIGHT)/2)
        wr$ = "\44"
        rc=SpiWrite(wr$)
    NEXT    
    GpioWrite(DISPLAY_CS_GPIO_NUMBER,1)
ENDSUB

SUB ClearDisplay()
    print "Writing screen buffer..."
    WriteScreenBuffer()
    print "done\n"
    
    print "Powering on display..."
    PowerOnDisplay()
    print "done\n"
    
    print "Refreshing display..."
    RefreshDisplay()
    print "done\n"
    
    print "Powering off display..."
    PowerOffDisplay()
    print "done\n"
    
ENDSUB

//*****************
//UART Subroutines
//*****************
DIM strLength, str$

FUNCTION HndlrUartRx()
    //if timer not running
    if TimerRunning(0) == 0 THEN
        wr$ = "\10" : SendCommand()     //start data
        GpioWrite(DISPLAY_DC_GPIO_NUMBER,1)
        GpioWrite(DISPLAY_CS_GPIO_NUMBER,0)
    ENDIF

    //print "Data has arrived\n"
    strLength = UartRead(display_data$) //get data from Uart buffer

    TimerCancel(0)              //restart timeout
    TimerStart(0,2000,0)        //restart timeout

    rc=SpiWrite(display_data$)  //send data to display

    //strLength = UartWrite(display_data$)    //loopback
    display_data$ = ""          //clear buffer
ENDFUNC 1

FUNCTION Btn1Pressed()
    print "exiting application...\n"
ENDFUNC 0

FUNCTION UartRxTimeout()
    GpioWrite(DISPLAY_CS_GPIO_NUMBER,1) //release chip select

    print "Uart Reception done. Updating display now...\n"

    print "Powering on display..."
    PowerOnDisplay()
    print "done\n"
    
    print "Refreshing display..."
    RefreshDisplay()
    print "done\n"
    
    print "Powering off display..."
    PowerOffDisplay()
    print "done\n"
ENDFUNC 1

//timer1
FUNCTION DisplayTimeout()
    print "display response timeout\n"
ENDFUNC 1

//timer2
FUNCTION ReadBattery() 
    //Read the ADC 
    battery_level = GpioRead(BATTERY_READ) 

    //battery is scaled 0.682 by hardware
    //10 bit adc, vref is VCC

    PRINT "\nRaw Battery Level Reading: ";battery_level
ENDFUNC 1 

//*****************
//VSP Subroutines
//*****************
FUNCTION decode_and_spi_write(encodedString$)
    dim num_encoded_bytes, i, count, x as integer
    dim decoded_data$, byte$
    num_encoded_bytes = STRLEN(encodedString$)

    decoded_data$= ""
    //print "encoded data length: ";num_encoded_bytes;"\n"
    //print "encoded data: ";encodedString$;"\n"
    
    FOR i=0 TO num_encoded_bytes STEP 2
        //get left most character
        byte$ = MID$(encodedString$,i,1)
        rc = StrDecodeU8(encodedString$,count,i+1)

        //send that number of bytes to display
        FOR x=1 TO count
            //decoded_data$ = decoded_data$ + byte$
            rc = SpiWrite(byte$)
        NEXT
    NEXT
    //print "decoded_data: ";decoded_data$;"\n"    
        
ENDFUNC 1

FUNCTION HndlrVSPRx() AS INTEGER 
    //if timer not running
    if TimerRunning(0) == 0 THEN
        wr$ = "\10" : SendCommand()     //start data
        GpioWrite(DISPLAY_DC_GPIO_NUMBER,1)
        GpioWrite(DISPLAY_CS_GPIO_NUMBER,0)
    ENDIF

    
    DIM rc, rx$, e$ : e$="exit"  
    rc=BleVSpRead(rx$,20) 
    PRINT "\nEncoded data: ";rx$;"\n"  

    //DIM tx$
    //tx$="received"
    //rc = BleVSpWrite(tx$)

    //If user has typed exit 
    //IF StrPos(rx$,e$,0) > -1 THEN 
    //    EXITFUNC 0 
    //ENDIF 

    TimerCancel(0)              //restart timeout

    rc = decode_and_spi_write(rx$)

    TimerStart(0,2000,0)        //restart timeout

    //rc=SpiWrite(display_data$)  //send data to display

    //strLength = UartWrite(display_data$)    //loopback
    //display_data$ = ""          //clear buffer
ENDFUNC 1

FUNCTION HndlrBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER)  
    SELECT nMsgId 
        CASE 0 
            PRINT "BLE Connection ";nCtx;" established\n"
        CASE 1 
            PRINT "BLE Connection ";nCtx;" disconnected\n" 
            //PRINT "BLE Disconnected \n" 
        case 10
            PRINT "New Bonding created\n"
        CASE 18 
            PRINT "Connection ";nCtx;" is now encrypted\n" 
        CASE 16 
            PRINT "Connected to a bonded master\n" 
        CASE 17 
            PRINT "A new pairing has replaced the old key\n";    
        CASE ELSE 
            PRINT "Unknown Ble Msg\n" 
    ENDSELECT 
ENDFUNC 1

FUNCTION HndlrDiscon(hConn, nRsn)
    print "BLE disconnected, starting advertisement...\n"
    dim addr$ 
    addr$=""
    rc=BleAdvertStart(0,addr$,20,300000,0)
ENDFUNC 1
//*****************
//Event and Error handlers
//*****************



//*****************
//main program
//*****************

//*****************
//setup
//*****************
//set regulator to 3.3V
//dim regOutIndex
//regOutIndex = GetRegout0()
//IF regOutIndex != 5 THEN
//    rc = SetREGOUT0(5)
//ENDIF

//------------------------------------------------------------------------------
// There are 2 types of non-volatile config keys. One type stores integer values
// and the other stores string values.
// This function sets the INTEGER variety and validates against min/max
// Valid keyID values are 0 to (CONFIG_KEY_ID_MAX_STR-1)
// returns 0 if successful, 1 invalid key, 2 invalid value, 3 if NvRecordSet fails
//------------------------------------------------------------------------------
function ConfigKeySet$(keyID as integer, newVal$ as string) as integer
    //if (keyID<0)||(keyID>=CONFIG_KEY_ID_MAX_STR) then
    //    exitfunc 1
    //endif

    //if ConfigKey$IsValid(keyID,newVal$)==0 then
        //new value is not valid
    //    exitfunc 2
    //endif

    rc = NvRecordSet((keyID + CONFIG_KEY_ID_START_STR),newVal$)

    //if (rc <= 0 && (NvReadFailMode & 1) == 1) then
    //    //Failed to write non-volatile record and application set to not continue
    //    NvFailure()
    //    exitfunc 3
    //endif
endfunc 0

//*****************
//display setup
//*****************
//set up display control pins
rc= GpioSetFunc(DISPLAY_CS_GPIO_NUMBER,2,1)         //output
rc= GpioSetFunc(DISPLAY_DC_GPIO_NUMBER,2,1)         //output
rc= GpioSetFunc(DISPLAY_RESET_GPIO_NUMBER,2,1)      //output
rc= GpioSetFunc(DISPLAY_BUSY_GPIO_NUMBER,1,2)       //input, weak pull-up
rc= GpioSetFunc(DISPLAY_DO_GPIO_NUMBER,2,1)         //output
rc= GpioSetFunc(DISPLAY_CLK_GPIO_NUMBER,2,1)        //output

//*****************
//Status LED setup
//*****************
#define LED_R_GPIO    01    //SIO 01
#define LED_G_GPIO    14    //SIO 14
#define LED_B_GPIO    17    //SIO 17

dim nFreq
dim nResolution
nFreq = 1024
nResolution = 2048

rc = GpioConfigPWM(nFreq, nResolution)  //set pwm frequency
rc = GpioSetFunc(LED_R_GPIO,2,2)    //PWM output
rc = GpioSetFunc(LED_G_GPIO,2,2)    //PWM output
rc = GpioSetFunc(LED_B_GPIO,2,2)    //PWM output

dim brightness
brightness = 2048

GpioWrite(LED_R_GPIO,brightness)
//GpioWrite(LED_R_GPIO,0)
brightness = 950
GpioWrite(LED_G_GPIO,brightness)
//GpioWrite(LED_G_GPIO,0)
brightness = 2048
GpioWrite(LED_B_GPIO,brightness)
//GpioWrite(LED_B_GPIO,0)
//print "press Button 0 to exit this application\n"

//*****************
//battery input setup
//*****************
//Remove resistor 
//rc = GpioSetFunc(BATTERY_READ, 1, 2) 
 
//Analogue in 
rc = GpioSetFunc(BATTERY_READ, 3, 0)

//ONEVENT EVTMR2      CALL ReadBattery

//Start timer to read battery level
//TimerStart(2,60000,1) 

//*****************
//button setup
//*****************
//set button pin to input with pull-up
rc = GpioSetFunc(BUTTON_GPIO,1,4)

//attach button to interrupt handler
rc = GPIOBindEvent(0,BUTTON_GPIO,1)

//button event handler
ONEVENT EVGPIOCHAN0 CALL Btn1Pressed



//UART event handlers
ONEVENT EVUARTRX    CALL HndlrUartRx
ONEVENT EVTMR0      CALL UartRxTimeout
//ONEVENT EVTMR1      CALL DisplayTimeout
ONEVENT EVVSPRX     CALL HndlrVSPRx
ONEVENT EVDISCON    CALL HndlrDiscon
ONEVENT EVBLEMSG    CALL HndlrBleMsg

UartClose()

//print "opening Uart..."
rc = UartOpen(115200,32,128,"CN81H")
//print "done\n"

print "Opening SPI port..."
rc=SpiOpen(0,2000000,0,h)
print "done\n"

//InitDisplay565()
InitDisplay73()
Delay(100)
//print "done\n"
//ClearDisplay()

//dim name$
//name$ = "Office Display"
//rc = ConfigKeySet$(17,name$)

//dim test_data$
//test_data$ = "\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E"
//print "encoded data:";test_data$;
//rc = decode_and_spi_write(test_data$)

OnStartup()

WAITEVENT

SpiClose(h)
